{"hash":"bec1339ef4d38a658092e33d288267ebb4e7e8fd","data":{"post":{"id":"a05ef1af80a9687c625a05028ce0a52c","title":"nftablesでdockerを使ってみました","content":"<p>Linux 3.13 から利用可能な、 iptables を置き換える(ことを目的とした)パケット分類フレームワークの(ファイアーウォール？)\nnftables を、 docker を使っている環境で使ってみました。</p>\n<h2 id=\"インストール・有効化\"><a href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%83%BB%E6%9C%89%E5%8A%B9%E5%8C%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>インストール・有効化</h2>\n<p>Docker から使うには、 iptables の互換フロントエンドをインストールする必要があります。\nnftables と一緒にインストールするには、以下を実行します。\n(<code>iptables-nft</code> は <code>iptables</code> を置き換えます。)</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> pacman -S nftables iptables-nft</code></pre>\n<p><code>nftables.service</code> を起動すると、 <code>/etc/nftables.conf</code> から設定を読み込みます。\n起動・自動的に起動するようにするには、以下を実行します。</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> systemctl enbale --now nftables</code></pre>\n<p>ArchLinux の nftables パッケージの <code>etc/nftables.conf</code> には、\nシンプルでセキュアなファイアーウォールが設定されています。\n1:0.9.3-1 時点での設定内容は以下の通りです。</p>\n<pre class=\"language-text\"><code class=\"language-text\">#!/usr/bin/nft -f\n# ipv4/ipv6 Simple & Safe Firewall\n# you can find examples in /usr/share/nftables/\n\ntable inet filter {\n  chain input {\n    type filter hook input priority 0;\n\n    # allow established/related connections\n    ct state {established, related} accept\n\n    # early drop of invalid connections\n    ct state invalid drop\n\n    # allow from loopback\n    iifname lo accept\n\n    # allow icmp\n    ip protocol icmp accept\n    ip6 nexthdr icmpv6 accept\n\n    # allow ssh\n    tcp dport ssh accept\n\n    # everything else\n    reject with icmpx type port-unreachable\n  }\n  chain forward {\n    type filter hook forward priority 0;\n    drop\n  }\n  chain output {\n    type filter hook output priority 0;\n  }\n\n}\n\n# vim:set ts=2 sw=2 et:</code></pre>\n<h2 id=\"docker-を使用するための設定\"><a href=\"#docker-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E8%A8%AD%E5%AE%9A\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker を使用するための設定</h2>\n<p>標準のままだと、 Docker コンテナとの通信は forward チェインのルールにより drop されてしまいます。\ndocker エンジンによって作成される <code>DOCKER-USER</code> チェインのパケットを accept するには、以下のコマンドを実行します。</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># ip ファミリーに filter テーブルを作成し、 DOCKER-USER チェインを追加する</span>\n$ <span class=\"token function\">sudo</span> nft <span class=\"token function\">add</span> table <span class=\"token function\">ip</span> filter                                                                                                                                                                          :<span class=\"token punctuation\">(</span>\n$ <span class=\"token function\">sudo</span> nft <span class=\"token function\">add</span> chain <span class=\"token function\">ip</span> filter DOCKER-<span class=\"token environment constant\">USER</span>\n$ <span class=\"token function\">sudo</span> nft <span class=\"token function\">add</span> rule <span class=\"token function\">ip</span> filter DOCKER-<span class=\"token environment constant\">USER</span> mark <span class=\"token builtin class-name\">set</span> <span class=\"token number\">1</span>\n<span class=\"token comment\"># inet filter forward の drop ルールの handle を確認する (この場合は `handle 12`)</span>\n$ <span class=\"token function\">sudo</span> nft list ruleset -a\ntable inet filter <span class=\"token punctuation\">{</span> <span class=\"token comment\"># handle 25</span>\n\tchain input <span class=\"token punctuation\">{</span> <span class=\"token comment\"># handle 1</span>\n\t\t<span class=\"token builtin class-name\">type</span> filter hook input priority filter<span class=\"token punctuation\">;</span> policy accept<span class=\"token punctuation\">;</span>\n\t\tct state <span class=\"token punctuation\">{</span> established, related <span class=\"token punctuation\">}</span> accept <span class=\"token comment\"># handle 5</span>\n\t\tct state invalid drop <span class=\"token comment\"># handle 6</span>\n\t\tiifname <span class=\"token string\">\"lo\"</span> accept <span class=\"token comment\"># handle 7</span>\n\t\t<span class=\"token function\">ip</span> protocol icmp accept <span class=\"token comment\"># handle 8</span>\n\t\tip6 nexthdr ipv6-icmp accept <span class=\"token comment\"># handle 9</span>\n\t\ttcp dport <span class=\"token number\">22</span> accept <span class=\"token comment\"># handle 10</span>\n\t\treject <span class=\"token comment\"># handle 11</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tchain forward <span class=\"token punctuation\">{</span> <span class=\"token comment\"># handle 2</span>\n\t\t<span class=\"token builtin class-name\">type</span> filter hook forward priority filter<span class=\"token punctuation\">;</span> policy accept<span class=\"token punctuation\">;</span>\n\t\tdrop <span class=\"token comment\"># handle 12</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tchain output <span class=\"token punctuation\">{</span> <span class=\"token comment\"># handle 3</span>\n\t\t<span class=\"token builtin class-name\">type</span> filter hook output priority filter<span class=\"token punctuation\">;</span> policy accept<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ntable <span class=\"token function\">ip</span> filter <span class=\"token punctuation\">{</span> <span class=\"token comment\"># handle 26</span>\n\tchain DOCKER-<span class=\"token environment constant\">USER</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\"># handle 1</span>\n\t\tmeta mark <span class=\"token builtin class-name\">set</span> 0x00000001 <span class=\"token comment\"># handle 2</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\"># drop ルールの前に insert する(ここの `handle 12` は上で確認した handle に変更してください)</span>\n$ <span class=\"token function\">sudo</span> nft insert rule inet filter forward handle <span class=\"token number\">12</span> mark <span class=\"token number\">1</span> accept\n<span class=\"token comment\"># ルールを /etc/nftables.conf に保存する</span>\n$ <span class=\"token function\">sudo</span> nft list ruleset <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/nftables.conf \ntable inet filter <span class=\"token punctuation\">{</span>\n\tchain input <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin class-name\">type</span> filter hook input priority filter<span class=\"token punctuation\">;</span> policy accept<span class=\"token punctuation\">;</span>\n\t\tct state <span class=\"token punctuation\">{</span> established, related <span class=\"token punctuation\">}</span> accept\n\t\tct state invalid drop\n\t\tiifname <span class=\"token string\">\"lo\"</span> accept\n\t\t<span class=\"token function\">ip</span> protocol icmp accept\n\t\tip6 nexthdr ipv6-icmp accept\n\t\ttcp dport <span class=\"token number\">22</span> accept\n\t\treject\n\t<span class=\"token punctuation\">}</span>\n\n\tchain forward <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin class-name\">type</span> filter hook forward priority filter<span class=\"token punctuation\">;</span> policy accept<span class=\"token punctuation\">;</span>\n\t\tmeta mark 0x00000001 accept\n\t\tdrop\n\t<span class=\"token punctuation\">}</span>\n\n\tchain output <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin class-name\">type</span> filter hook output priority filter<span class=\"token punctuation\">;</span> policy accept<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\ntable <span class=\"token function\">ip</span> filter <span class=\"token punctuation\">{</span>\n\tchain DOCKER-<span class=\"token environment constant\">USER</span> <span class=\"token punctuation\">{</span>\n\t\tmeta mark <span class=\"token builtin class-name\">set</span> 0x00000001\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>nftables の設定の保存が完了したら、 <code>docker.service</code> を再起動することで\ndocker によりファイアウォールルールが作成されます。\n(docker は iptables フロントエンドを使用するため、 <code>iptables-nft</code> パッケージに付属する <code>iptables</code> コマンドを使用して\nルールが追加されます。)\n念のため <code>nftables.service</code> も再起動して、今保存したルールを再読み込みします。</p>\n<p><code>sudo systemctl restart nftables docker</code></p>\n<p><code>docker.service</code> が正常に起動したら、 docker のルールが追加され、コンテナとの通信ができるようになっているはずです。</p>\n<h2 id=\"nftables-インストール前の-iptables-ルールの参照\"><a href=\"#nftables-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E5%89%8D%E3%81%AE-iptables-%E3%83%AB%E3%83%BC%E3%83%AB%E3%81%AE%E5%8F%82%E7%85%A7\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>nftables インストール前の iptables ルールの参照</h2>\n<p><code>iptables</code> コマンドの代わりに <code>iptables-legacy</code> コマンドを使用することで、\niptables で使っていたルールを確認することができます。</p>\n<p>docker のルールもこちらからインポートしようかなと思ったのですが、そうすると iptables-nft の互換性が壊れてしまって\ndocker.service の起動に失敗したので、 ArchWiki の方法に従いました。</p>\n","date":"22 February 2020","timeToRead":2}},"context":{}}