{"hash":"d5e5903248c4b0d5af4b0fecfa4b40b1e78b5555","data":{"post":{"id":"96d52340341853628297a7e00b8e273c","title":"/dev/randomが遅かったので高速化を試してみました","content":"<p>ArchLinux をインストールしているノート PC に <code>rng-tools</code> をインストールして、\n初期設定の状態で <code>rngd.service</code> を起動していたのですが、乱数生成が遅く感じたので調べてみました。</p>\n<h2 id=\"乱数生成の速度計測\"><a href=\"#%E4%B9%B1%E6%95%B0%E7%94%9F%E6%88%90%E3%81%AE%E9%80%9F%E5%BA%A6%E8%A8%88%E6%B8%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>乱数生成の速度計測</h2>\n<p>乱数生成の速度の計測は以下のコマンドで行いました。</p>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">sudo</span> <span class=\"token function\">dd</span> <span class=\"token assign-left variable\">if</span><span class=\"token operator\">=</span>/dev/random <span class=\"token assign-left variable\">of</span><span class=\"token operator\">=</span>/dev/null <span class=\"token assign-left variable\">bs</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1000000</span> <span class=\"token assign-left variable\">iflag</span><span class=\"token operator\">=</span>fullblock <span class=\"token assign-left variable\">status</span><span class=\"token operator\">=</span>progress</code></pre>\n<p>この結果が、前から使っているノート PC では 400kB/s 程度出ていて、\n<a href=\"https://wiki.archlinux.org/index.php/Rng-tools\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rng-tools - ArchWiki</a>\nでは 50kB/s 程度出ていれば問題ないと書かれていますが、\n新しい方のノート PC では 4kB/s 程度でした。</p>\n<p><code>/dev</code> を確認してみると、 <code>/dev/hwrng</code> は存在して、 <code>rngd</code> もそれを認識して正常に使用しているようでした。\n搭載している tpm は 2.0 で、特に tpm 関連のエラーも出ていません。\nまた、 <code>lscpu</code> で確認すると、 <code>rdrand</code> <code>rdseed</code> 両方のフラグが立っています。</p>\n<h2 id=\"rngd-のソースの優先順位\"><a href=\"#rngd-%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%84%AA%E5%85%88%E9%A0%86%E4%BD%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>rngd のソースの優先順位</h2>\n<p><a href=\"https://www.mankier.com/8/rngd#Entropy_Sources\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rngd(8) の Entropy_Source</a>\nを見ると、 </p>\n<ol>\n<li>hwrng</li>\n<li>tpm</li>\n<li>rdrand</li>\n<li>darn</li>\n<li>nist</li>\n<li>jitter</li>\n<li>pkcs11</li>\n</ol>\n<p>の順で使用するようです。</p>\n<h2 id=\"hwrng-の無効化\"><a href=\"#hwrng-%E3%81%AE%E7%84%A1%E5%8A%B9%E5%8C%96\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>hwrng の無効化</h2>\n<p>そこで、 <code>-r /</code> など、適当なパスを指定して、hwrng を使わないように設定しました。\nその結果、 600 kB/s 程度出るようになりました。</p>\n<p>hwrng の方が品質がよさそうですが、普段そこまでエントロピーの品質を気にしない場面においては、\n速度が出る方が便利そうだと思い今回はこのように設定しました。\nGPG キーなんかを作るときは hwrng を使った方がよさそうですが、そもそもノート PC などインターネットに接続された\nマシンよりも、専用に用意したオフラインのマシンを使用する方が安全だと思うので、ほとんどの場面において\n問題なさそうです。</p>\n","date":"23 February 2020","timeToRead":1}},"context":{}}