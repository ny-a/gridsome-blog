{"hash":"6237f1dec98e7261c0c7698e50939888f763cfba","data":{"post":{"id":"61c51582d03d5761240f212309e1a88a","title":"SpotFleet内の複数インスタンスで連番を生成するスクリプト","content":"<p>AWS でスポットインスタンスを複数起動して大量の処理を行うことがたまにあります。\nTerraform で SpotFleet をリクエストして複数のインスタンスを立ち上げることはできますが、個別に user_data を指定するのは\n少し面倒です。</p>\n<p>ただ、同じ user_data でも、重複しない連番さえ取ることができればなんとかなることも多いはず……と思っていて、\nパラメータストアを使ったり DynamoDB の AtomicCounter を使ったりしているようですが、\nAWS CLI + jq だけで生成する方法を考えてみました。</p>\n<h2 id=\"スクリプト\"><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>スクリプト</h2>\n<pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">TOKEN</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -s -XPUT <span class=\"token string\">\"http://169.254.169.254/latest/api/token\"</span> -H <span class=\"token string\">\"X-aws-ec2-metadata-token-ttl-seconds: 21600\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">INSTANCE_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">curl</span> -sH <span class=\"token string\">\"X-aws-ec2-metadata-token: <span class=\"token variable\">$TOKEN</span>\"</span> http://169.254.169.254/latest/meta-data/instance-id<span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">FLEET_ID</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws ec2 describe-instances --instance-ids $INSTANCE_ID <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.Reservations[].Instances[].Tags[] | select(.Key == \"aws:ec2spot:fleet-request-id\").Value'</span><span class=\"token variable\">)</span></span>\n<span class=\"token assign-left variable\">TARGET_CAPACITY</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>aws ec2 describe-spot-fleet-requests --spot-fleet-request-ids $FLEET_ID <span class=\"token operator\">|</span> jq <span class=\"token string\">'.SpotFleetRequestConfigs[].SpotFleetRequestConfig.TargetCapacity'</span><span class=\"token variable\">)</span></span>\n\n<span class=\"token keyword\">while</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  aws ec2 describe-instances --filter <span class=\"token assign-left variable\">Name</span><span class=\"token operator\">=</span>tag:aws:ec2spot:fleet-request-id,Values<span class=\"token operator\">=</span><span class=\"token variable\">$FLEET_ID</span> <span class=\"token operator\">|</span> jq -r <span class=\"token string\">'.Reservations[].Instances[].InstanceId'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token operator\">></span> /tmp/instance_ids.txt\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> /tmp/instance_ids.txt <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> -l<span class=\"token variable\">)</span></span> -eq <span class=\"token variable\">$TARGET_CAPACITY</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">break</span>\n  <span class=\"token keyword\">fi</span>\n  <span class=\"token function\">sleep</span> <span class=\"token number\">10</span>\n<span class=\"token keyword\">done</span>\n\n<span class=\"token function\">cat</span> /tmp/instance_ids.txt<span class=\"token operator\">|</span><span class=\"token function\">awk</span> <span class=\"token string\">\"/<span class=\"token variable\">$INSTANCE_ID</span>/{print FNR - 1}\"</span>\n<span class=\"token function\">rm</span> /tmp/instance_ids.txt</code></pre>\n<p>SpotFleet で起動したインスタンスには、 FleetRequestId のタグが付けられています(というか taggingRole がありますよね)。\nTag がついているということはインスタンスをフィルタリングできるので、 FleetRequest 内のインスタンスIDを列挙してソートし、\n自分のインスタンスIDの位置を awk で導出しています。(今回は 0-origin にしました。)</p>\n<p>これの弱点？として、インスタンスが全て立ち上がっているときを想定しているため、起動していないインスタンスは待ちますが、\n既に終了したインスタンスがあって CLI で取得できなくなった場合は永遠に待ち続けてしまいます。\n時間が経ってから呼ぶ可能性があるなら <code>/tmp/instance_ids</code> を消さないようにするか、\n起動時に自動実行しておいて番号自体をキャッシュすればある程度回避できそうです。</p>\n<p>Ansible とか使えばいいのでは？という気持ちも少しずつ出てきています。\nというか、こういった分離しやすいワークロードを分散して実行するようなツール、ありそうなんですよね……。\nDocker 化してオーケストレーションが早そうではあります。 </p>\n","date":"01 March 2020","timeToRead":1}},"context":{}}