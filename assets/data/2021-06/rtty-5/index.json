{"hash":"0d55ecf0485fcf8bed4c28889281f03fdac43a0a","data":{"post":{"id":"0aee87901cc6aca1b2f82ea54287f84f","title":"RTTY のデコードを試す(5)","content":"<p>前回はサンプリングレートや量子化ビット数を変更できるようにしましたが、\nオリジナルのファイルから ffmpeg のデフォルト設定で wav に変換すると、\n48kHz となり、実行時間が気になってきます。\nそこで、高速化を試すことにしました。</p>\n<p>真っ先に、リストに append したり pop したりするのは不安になってくるので、\narray をリングバッファとして使いましょう。</p>\n<p>その次はどこが遅いか調べます。<code>cProfile</code> なんかを使うとよさそうです。\n調べてみると、一番遅いのは <code>sum</code> の呼び出しでしょうか。</p>\n<p>window_size で平滑化(？)していますが、毎回その全てを足し合わせるのは効率が悪いですね。\n実質的にしなければいけないのは、window_size 分だけ前の値を引いて、新しい値を足すことです。\n別の class に切り出して、インデックスの管理もその中に任せましょう。</p>\n<p>ファイルも分割したいですが、カレントディレクトリにある python ファイルを実行すると、\nexplicit relative import が使えないようなので、<code>src</code> ディレクトリ内にファイルを移動して、\n<code>python -m src.main</code> のように呼び出すようにします。</p>\n<p><code>**</code> 演算子は、2乗とか決まっていたら乗算で書いた方が早いようですね。\n値にあまり意味はなく (値に失礼)、大小を比較しているのみのため、<code>sqrt</code> も不要でしょう。\n削除しましょう。</p>\n<p>さて、ちまちまと高速化してきましたが、一番遅いのは多分 stdout です。ファイルに書くようにしましょう。\nだいたい8倍くらいは高速になりました、多分。</p>\n","date":"18 June 2021","timeToRead":1}},"context":{}}