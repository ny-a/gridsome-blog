{"hash":"3a4a9fde2bcab39d0b988459250ca23bf32195ad","data":{"post":{"id":"50871496a0aad64dbbf8fce335f3e540","title":"RTTY のデコードを試す(6)","content":"<p>さて、いよいよ ITA2 のデコードに進んでいこうと思います。</p>\n<p>基本的には5ビットごとに切り出してコード表と対応させるだけなんですが、\nその5ビットの区切りを見つけるのも一工夫必要そうです。</p>\n<p>また、区切りとなるストップビットの長さも設定によってバラバラのようです。\nそこで、スタートビットとストップビットの組み合わせが判明していると仮定して\n(といっても2パターンしかないですが)、ストップビットの長さについては\n任意の長さを受け入れられるようにしようと思います。</p>\n<p>まず、始めに出てきたストップビット→スタートビットの変化を検出します。\nここではデータ列内にマッチする可能性もありますが、始めの何文字かを捨てることを許容できれば、\n後で説明するようにいつかきちんとした区切りを検出できるようになるので、\nここでは気にしないことにします。</p>\n<p>次のビットからは、データ列です。5ビット連続で読み込みましょう。\n(データ列が下位ビットからか上位ビットからかは分かりません……が、\nこれも2パターンなのでなんとかなるでしょう。)</p>\n<p>さて、ストップビットを検出するわけですが……、検出しません！！\n長さも分からないですし、そもそもズレている場合もあるので、\n次のストップビット→スタートビットの変化を検出するまで読み飛ばします。\nそうすることで、ズレていても(多分)いつか正しい位置に補正されるわけです。</p>\n<p>いや、試してないので分かりません！そう信じて実装しました！！</p>\n<p>……という感じでデコードしてみると、うまくデコードできたようです。\nよかった。。。</p>\n","date":"24 June 2021","timeToRead":1}},"context":{}}