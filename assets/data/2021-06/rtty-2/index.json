{"hash":"43e37fc31496110751978ef4abba7c597936965b","data":{"post":{"id":"324298e43dbfa6b4bbc0fdd0013fc49d","title":"RTTY のデコードを試す(2)","content":"<p>前回生成した csv から、文字へのデコードを試してみます。</p>\n<p>ゆくゆくはプログラム書いてデコードしたいですが、一旦コードの\n仕様確認なども兼ねて csv 上で挑戦します。</p>\n<p>まず、0/1の2値化された値は、かなり安定しているようです。\nRTTYでは一般的に 45.45Baud を使用するようなので、\n8kHz だと 45.45 で割ると 176 フレームごとに1ビットという感じでしょうか。\nまた、一般的に使われている文字コードは Baudot code で、5bit で表現されて\nいて、各文字にスタートビットとストップビットがそれぞれ1, 1.5ビットの長さで\n付加されているようです。</p>\n<p>とりあえず、だいたい176回同じ値が連続するごとに区切ってみると、定期的に\n中途半端な部分が出てきそうです。\n試してみると……、めちゃめちゃ綺麗にアライメントされていて、半端なビットは\nなさそうでした。</p>\n<p>早速困ってしまいましたが、今回のサンプルは幸い値が詳しくコメントされています。\nほぼ反則ですが、一度文字の方からバイナリ列に当てはめて考えてみようかなと\n悩んでいます。</p>\n<p>いや、それよりも FFT する方法で、諸々のパラメータが分からない場合にでも\n使用できるデコーダを書くのを先に進めた方がいいかもしれません。</p>\n<p>まあ、何か重大なことを見落としているなんてこともしょっちゅうなので、\n諦めずに挑戦してみるのも大事かもしれません。</p>\n","date":"02 June 2021","timeToRead":1}},"context":{}}