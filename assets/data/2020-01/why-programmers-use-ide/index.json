{"hash":"d6cbd896ec173de9e233cb8a28bc9fc8b0b3fc48","data":{"post":{"id":"372f85defc65f9dd7ee549de31bd02e8","title":"なぜIDEの支援機能を使うのか","content":"<p>少し前まで IDE の補完機能など、コーディングの支援機能を使いながらコーディングすることが、\nなんだか IDE にコーディングさせられているようで嫌でした。</p>\n<p>これは恐らく私だけが感じていることではなくて、初心者の方のツイートで\nIDE なしでコーディングする/コーディングできるようになりたい、といった\n発言を見かけることがあります。</p>\n<p>ただ、これは開発の規模がまだ小さいときに強く感じるものだと思います。\nコードベースの規模が大きくなってくると、細かい所まで全て覚えていられないですし、\nコーディング量が増えるにつれてミスをする確立も上がっていきます。\nそんなときに IDE を使っていると、例え補完機能を(候補が出ても無視して)\nほとんど使っていなかったとしても、ミスがあればすぐに知らせてくれますし、\n仮にスペルに自信がないなどの場合にも補完機能を使ってスムーズにコーディングを進めることができます。\n(もし補完機能を使っていなければ定義されている箇所を確認することになりますし、\n早くミスを見つけるためには頻繁にコンパイル等をする必要があります。)</p>\n<p>コンピュータはコアとなるロジックを実装されるまで知りません。\nプログラマーはそのコアロジックの実装に集中することで生産性を高めようとしています。\nそのため、既に実装されている部分やライブラリについてはコンピュータの助けを借りて、\n新しい部分の実装に集中することができるのです。</p>\n<p>もちろん、主体的にプログラミングする必要があります。\nいくら候補が表示されているからといって、何も考えずにそれを選んでいると間違うこともあります。\n自分で何を実装すべきかをきちんと認識した上で、実際のコード上の表現について\n助けを借りる、といった考え方が合っているのかなと思っています。</p>\n","date":"12 January 2020","timeToRead":1}},"context":{}}